{"ast":null,"code":"var _jsxFileName = \"/home/mohan/dev/react/client/src/components/QueryCounterPage/QueryPage.js\";\nimport React, { Component } from \"react\";\nimport classes from \"./QueryPage.module.css\";\nimport { Button } from \"../Button/Button\";\nimport Single from \"./Single/Single\";\nimport SuccessError from \"../SuccessError/SuccessError\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst faq = [{\n  query: \"Where is Dance competetion hosted?\",\n  answer: \"Lorem ipsum dolor sit amet consectetur, adipisicing elit. Tempore cupiditate, quasi ex eum nihil rerum exercitationem nesciunt odio placeat veniam doloremque voluptatibus eveniet animi iusto voluptas illo velit, at eligendi?\"\n}, {\n  query: \"My friend is not from IIT, Can he participate in cricket match?\",\n  answer: \"Lorem ipsum dolor sit amet consectetur, adipisicing elit. Tempore cupiditate, quasi ex eum nihil rerum exercitationem nesciunt odio placeat veniam doloremque voluptatibus eveniet animi iusto voluptas illo velit, at eligendi?\"\n}, {\n  query: \"Can I get snacks in the event?\",\n  answer: \"Lorem ipsum dolor sit amet consectetur, adipisicing elit. Tempore cupiditate, quasi ex eum nihil rerum exercitationem nesciunt odio placeat veniam doloremque voluptatibus eveniet animi iusto voluptas illo velit, at eligendi?\"\n}, {\n  query: \"Where to visit in case of medical emergency?\",\n  answer: \"Lorem ipsum dolor sit amet consectetur, adipisicing elit. Tempore cupiditate, quasi ex eum nihil rerum exercitationem nesciunt odio placeat veniam doloremque voluptatibus eveniet animi iusto voluptas illo velit, at eligendi?\"\n}, {\n  query: \"I have registered for the event and will not be able to play due to some reason, what to do?\",\n  answer: \"Lorem ipsum dolor sit amet consectetur, adipisicing elit. Tempore cupiditate, quasi ex eum nihil rerum exercitationem nesciunt odio placeat veniam doloremque voluptatibus eveniet animi iusto voluptas illo velit, at eligendi?\"\n}];\n\nfunction ValidationMessage(props) {\n  if (!props.valid) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      className: classes.error_msg,\n      children: props.message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 16\n    }, this);\n  }\n\n  return null;\n}\n\n_c = ValidationMessage;\n\nclass AskQuery extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      kidlogo: process.env.PUBLIC_URL + \"/images/query.svg\",\n      username: \"\",\n      usernameValid: false,\n      categories: [\"Events\", \"Accomodation\", \"Food\", \"Safety Precautions\", \"COVID Arrangements\", \"Miscellaneous\"],\n      category: \"Miscellaneous\",\n      categoryValid: true,\n      query: \"\",\n      queryValid: false,\n      formValid: false,\n      submitted: false,\n      showPastQuery: false,\n      btnText: \"Show Past Query\",\n      showPopup: false,\n      successErrorPopup: false,\n      successErrorMessage: \"\",\n      errorMessage: {\n        username: \"\",\n        category: \"\",\n        query: \"\",\n        form: \"\"\n      },\n      queries: faq\n    };\n  }\n\n  async validateForm() {\n    if (this.state.usernameValid === true && this.state.categoryValid === true && this.state.queryValid === true) {\n      await this.setState({\n        formValid: true\n      });\n    } else {\n      let errMsg = { ...this.state.errorMessage\n      };\n      errMsg.form = \"Form is invalid\";\n      await this.setState({\n        formValid: false,\n        errorMessage: errMsg\n      });\n    }\n  }\n\n  async updateUsername(data) {\n    let errorMsg = { ...this.state.errorMessage\n    };\n\n    if (data.length > 0) {\n      await this.setState({\n        username: data,\n        usernameValid: true\n      });\n    } else {\n      errorMsg.username = \"Name is required!\";\n      await this.setState({\n        username: data,\n        usernameValid: false,\n        errorMessage: errorMsg\n      });\n    }\n\n    await this.validateForm();\n  }\n\n  getCategoryOptions() {\n    let options = [];\n    this.state.categories.forEach(category => {\n      options.push( /*#__PURE__*/_jsxDEV(\"option\", {\n        value: category,\n        children: category\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 26\n      }, this));\n    });\n    return options;\n  }\n\n  async updateCategory(data) {\n    let errorMsg = { ...this.state.errorMessage\n    };\n    console.log(data);\n\n    if (data.length > 0 && this.state.categories.includes(data) === true) {\n      await this.setState({\n        category: data,\n        categoryValid: true\n      });\n    } else {\n      errorMsg.category = \"Category is required!\";\n      await this.setState({\n        category: data,\n        categoryValid: false,\n        errorMessage: errorMsg\n      });\n    }\n\n    await this.validateForm();\n  }\n\n  async updateQuery(data) {\n    let errorMsg = { ...this.state.errorMessage\n    };\n\n    if (data.length > 0) {\n      await this.setState({\n        query: data,\n        queryValid: true\n      });\n    } else {\n      errorMsg.query = \"Query is required!\";\n      await this.setState({\n        query: data,\n        queryValid: false,\n        errorMessage: errorMsg\n      });\n    }\n\n    this.validateForm();\n  }\n\n  async handleSubmit(e) {\n    e.preventDefault();\n    await this.validateForm();\n\n    if (this.state.formValid === true && this.state.submitted === false) {\n      this.setState({\n        submitted: true\n      });\n      const url = process.env.REACT_APP_API_ENDPOINT + \"query/\";\n      fetch(url, {\n        method: \"POST\",\n        headers: {\n          \"Content-type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          username: this.state.username,\n          category: this.state.category,\n          query: this.state.query\n        })\n      }).then(async () => {\n        await this.setState({\n          username: \"\",\n          usernameValid: false,\n          category: this.state.categories[this.state.categories.length - 1],\n          categoryValid: true,\n          query: \"\",\n          queryValid: false,\n          formValid: false,\n          submitted: false,\n          showPastQuery: false,\n          btnText: \"Show Past Query\",\n          showPopup: true,\n          successErrorPopup: true,\n          successErrorMessage: \"Query Posted Successfully\",\n          errorMessage: {\n            username: \"\",\n            category: \"\",\n            query: \"\",\n            form: \"\"\n          },\n          queries: faq\n        });\n      });\n    } else {\n      let errMsg = { ...this.state.errorMessage\n      };\n      errMsg.form = \"Form is invalid\";\n      await this.setState({\n        errorMessage: errMsg,\n        showPopup: true,\n        successErrorPopup: false,\n        successErrorMessage: \"Query could not be posted\"\n      });\n    }\n  }\n\n  async updateBtn() {\n    if (!this.state.showPastQuery) {\n      await this.setState({\n        btnText: \"Close Past Query\",\n        showPastQuery: !this.state.showPastQuery\n      });\n      const url = process.env.REACT_APP_API_ENDPOINT + \"query\";\n      fetch(url, {\n        method: \"GET\"\n      }).then(async res => {\n        console.log(res);\n        await this.setState({\n          queries: await res.json()\n        });\n        console.log(this.state.queries);\n      });\n    } else {\n      await this.setState({\n        btnText: \"Show Past Query\",\n        showPastQuery: !this.state.showPastQuery\n      });\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.main,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.container,\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          className: classes.title,\n          children: \"Ask Query\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 249,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: classes.subtitle,\n          children: \"Do you have any querytion regarding any Events or anything to ask from the Event Manager?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          action: \"#\",\n          id: \"js-form\",\n          className: classes.form,\n          onSubmit: this.handleSubmit.bind(this),\n          children: [/*#__PURE__*/_jsxDEV(ValidationMessage, {\n            valid: this.state.formValid,\n            message: this.state.errorMessage.form\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 260,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: classes.form_group,\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: classes.container_label,\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                className: classes.label,\n                htmlFor: \"username\",\n                children: \"Username\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 267,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(ValidationMessage, {\n                valid: this.state.usernameValid,\n                message: this.state.errorMessage.username\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 273,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 266,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              id: \"username\",\n              name: \"username\",\n              className: classes.form_field,\n              value: this.state.username,\n              onChange: e => this.updateUsername(e.target.value),\n              placeholder: \"Username\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 278,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 265,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: classes.form_group,\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: classes.container_label,\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                className: classes.label,\n                htmlFor: \"category\",\n                children: \"Query Category\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 293,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(ValidationMessage, {\n                valid: this.state.categoryValid,\n                message: this.state.errorMessage.category\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 299,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 292,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n              name: \"category\",\n              id: \"category\",\n              className: classes.form_field,\n              value: this.state.category,\n              onChange: e => this.updateCategory(e.target.value),\n              children: this.getCategoryOptions()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 304,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 291,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: classes.form_group,\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: classes.container_label,\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                className: classes.label,\n                htmlFor: \"query\",\n                children: \"Query\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 319,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(ValidationMessage, {\n                valid: this.state.queryValid,\n                message: this.state.errorMessage.query\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 325,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 318,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n              type: \"text\",\n              id: \"query\",\n              name: \"query\",\n              className: classes.form_field,\n              value: this.state.query,\n              onChange: e => this.updateQuery(e.target.value),\n              rows: \"5\",\n              placeholder: \"Enter your query here\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 330,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 317,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: classes.btn,\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              buttonStyle: \"btn--rounded-dark\",\n              className: classes.btn,\n              type: \"submit\",\n              disabled: !this.state.formValid,\n              children: \"Ask Query\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 345,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 344,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 254,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.past_query,\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          buttonStyle: \"btn--rounded-dark\",\n          className: classes.see_past_query_btn,\n          onClick: () => this.updateBtn(),\n          children: this.state.btnText\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 358,\n          columnNumber: 21\n        }, this), this.state.showPastQuery ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.faqcontainer,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: classes.container_fluid,\n            children: this.state.queries.map(ele => {\n              return /*#__PURE__*/_jsxDEV(Single, { ...ele\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 369,\n                columnNumber: 44\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 367,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 366,\n          columnNumber: 25\n        }, this) : null]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 357,\n        columnNumber: 17\n      }, this), this.state.showPopup && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(SuccessError, {\n          show: true,\n          success: this.state.successErrorPopup,\n          message: this.state.successErrorMessage,\n          closePopup: async () => {\n            await this.setState({\n              showPopup: false\n            });\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 377,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 376,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default AskQuery;\n\nvar _c;\n\n$RefreshReg$(_c, \"ValidationMessage\");","map":{"version":3,"sources":["/home/mohan/dev/react/client/src/components/QueryCounterPage/QueryPage.js"],"names":["React","Component","classes","Button","Single","SuccessError","faq","query","answer","ValidationMessage","props","valid","error_msg","message","AskQuery","constructor","state","kidlogo","process","env","PUBLIC_URL","username","usernameValid","categories","category","categoryValid","queryValid","formValid","submitted","showPastQuery","btnText","showPopup","successErrorPopup","successErrorMessage","errorMessage","form","queries","validateForm","setState","errMsg","updateUsername","data","errorMsg","length","getCategoryOptions","options","forEach","push","updateCategory","console","log","includes","updateQuery","handleSubmit","e","preventDefault","url","REACT_APP_API_ENDPOINT","fetch","method","headers","body","JSON","stringify","then","updateBtn","res","json","render","main","container","title","subtitle","bind","form_group","container_label","label","form_field","target","value","btn","past_query","see_past_query_btn","faqcontainer","container_fluid","map","ele"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport classes from \"./QueryPage.module.css\";\nimport { Button } from \"../Button/Button\";\nimport Single from \"./Single/Single\";\nimport SuccessError from \"../SuccessError/SuccessError\";\n\nconst faq = [\n    {\n        query: \"Where is Dance competetion hosted?\",\n        answer:\n            \"Lorem ipsum dolor sit amet consectetur, adipisicing elit. Tempore cupiditate, quasi ex eum nihil rerum exercitationem nesciunt odio placeat veniam doloremque voluptatibus eveniet animi iusto voluptas illo velit, at eligendi?\",\n    },\n    {\n        query:\n            \"My friend is not from IIT, Can he participate in cricket match?\",\n        answer:\n            \"Lorem ipsum dolor sit amet consectetur, adipisicing elit. Tempore cupiditate, quasi ex eum nihil rerum exercitationem nesciunt odio placeat veniam doloremque voluptatibus eveniet animi iusto voluptas illo velit, at eligendi?\",\n    },\n    {\n        query: \"Can I get snacks in the event?\",\n        answer:\n            \"Lorem ipsum dolor sit amet consectetur, adipisicing elit. Tempore cupiditate, quasi ex eum nihil rerum exercitationem nesciunt odio placeat veniam doloremque voluptatibus eveniet animi iusto voluptas illo velit, at eligendi?\",\n    },\n    {\n        query: \"Where to visit in case of medical emergency?\",\n        answer:\n            \"Lorem ipsum dolor sit amet consectetur, adipisicing elit. Tempore cupiditate, quasi ex eum nihil rerum exercitationem nesciunt odio placeat veniam doloremque voluptatibus eveniet animi iusto voluptas illo velit, at eligendi?\",\n    },\n    {\n        query:\n            \"I have registered for the event and will not be able to play due to some reason, what to do?\",\n        answer:\n            \"Lorem ipsum dolor sit amet consectetur, adipisicing elit. Tempore cupiditate, quasi ex eum nihil rerum exercitationem nesciunt odio placeat veniam doloremque voluptatibus eveniet animi iusto voluptas illo velit, at eligendi?\",\n    },\n];\n\nfunction ValidationMessage(props) {\n    if (!props.valid) {\n        return <p className={classes.error_msg}>{props.message}</p>;\n    }\n    return null;\n}\n\nclass AskQuery extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            kidlogo: process.env.PUBLIC_URL + \"/images/query.svg\",\n            username: \"\",\n            usernameValid: false,\n            categories: [\n                \"Events\",\n                \"Accomodation\",\n                \"Food\",\n                \"Safety Precautions\",\n                \"COVID Arrangements\",\n                \"Miscellaneous\",\n            ],\n            category: \"Miscellaneous\",\n            categoryValid: true,\n            query: \"\",\n            queryValid: false,\n            formValid: false,\n            submitted: false,\n            showPastQuery: false,\n            btnText: \"Show Past Query\",\n            showPopup: false,\n            successErrorPopup: false,\n            successErrorMessage: \"\",\n            errorMessage: {\n                username: \"\",\n                category: \"\",\n                query: \"\",\n                form: \"\",\n            },\n            queries: faq,\n        };\n    }\n\n    async validateForm() {\n        if (\n            this.state.usernameValid === true &&\n            this.state.categoryValid === true &&\n            this.state.queryValid === true\n        ) {\n            await this.setState({\n                formValid: true,\n            });\n        } else {\n            let errMsg = { ...this.state.errorMessage };\n            errMsg.form = \"Form is invalid\";\n            await this.setState({\n                formValid: false,\n                errorMessage: errMsg,\n            });\n        }\n    }\n    async updateUsername(data) {\n        let errorMsg = { ...this.state.errorMessage };\n        if (data.length > 0) {\n            await this.setState({\n                username: data,\n                usernameValid: true,\n            });\n        } else {\n            errorMsg.username = \"Name is required!\";\n            await this.setState({\n                username: data,\n                usernameValid: false,\n                errorMessage: errorMsg,\n            });\n        }\n        await this.validateForm();\n    }\n\n    getCategoryOptions() {\n        let options = [];\n        this.state.categories.forEach((category) => {\n            options.push(<option value={category}>{category}</option>);\n        });\n        return options;\n    }\n\n    async updateCategory(data) {\n        let errorMsg = { ...this.state.errorMessage };\n        console.log(data);\n        if (data.length > 0 && this.state.categories.includes(data) === true) {\n            await this.setState({\n                category: data,\n                categoryValid: true,\n            });\n        } else {\n            errorMsg.category = \"Category is required!\";\n            await this.setState({\n                category: data,\n                categoryValid: false,\n                errorMessage: errorMsg,\n            });\n        }\n        await this.validateForm();\n    }\n\n    async updateQuery(data) {\n        let errorMsg = { ...this.state.errorMessage };\n        if (data.length > 0) {\n            await this.setState({\n                query: data,\n                queryValid: true,\n            });\n        } else {\n            errorMsg.query = \"Query is required!\";\n            await this.setState({\n                query: data,\n                queryValid: false,\n                errorMessage: errorMsg,\n            });\n        }\n        this.validateForm();\n    }\n\n    async handleSubmit(e) {\n        e.preventDefault();\n        await this.validateForm();\n        if (this.state.formValid === true && this.state.submitted === false) {\n            this.setState({\n                submitted: true,\n            });\n\n            const url = process.env.REACT_APP_API_ENDPOINT + \"query/\";\n\n            fetch(url, {\n                method: \"POST\",\n                headers: {\n                    \"Content-type\": \"application/json\",\n                },\n                body: JSON.stringify({\n                    username: this.state.username,\n                    category: this.state.category,\n                    query: this.state.query,\n                }),\n            }).then(async () => {\n                await this.setState({\n                    username: \"\",\n                    usernameValid: false,\n                    category: this.state.categories[\n                        this.state.categories.length - 1\n                    ],\n                    categoryValid: true,\n                    query: \"\",\n                    queryValid: false,\n                    formValid: false,\n                    submitted: false,\n                    showPastQuery: false,\n                    btnText: \"Show Past Query\",\n                    showPopup: true,\n                    successErrorPopup: true,\n                    successErrorMessage: \"Query Posted Successfully\",\n                    errorMessage: {\n                        username: \"\",\n                        category: \"\",\n                        query: \"\",\n                        form: \"\",\n                    },\n                    queries: faq,\n                });\n            });\n        } else {\n            let errMsg = { ...this.state.errorMessage };\n            errMsg.form = \"Form is invalid\";\n            await this.setState({\n                errorMessage: errMsg,\n                showPopup: true,\n                successErrorPopup: false,\n                successErrorMessage: \"Query could not be posted\",\n            });\n        }\n    }\n\n    async updateBtn() {\n        if (!this.state.showPastQuery) {\n            await this.setState({\n                btnText: \"Close Past Query\",\n                showPastQuery: !this.state.showPastQuery,\n            });\n\n            const url = process.env.REACT_APP_API_ENDPOINT + \"query\";\n            fetch(url, {\n                method: \"GET\",\n            }).then(async (res) => {\n                console.log(res);\n                await this.setState({\n                    queries: await res.json(),\n                });\n                console.log(this.state.queries);\n            });\n        } else {\n            await this.setState({\n                btnText: \"Show Past Query\",\n                showPastQuery: !this.state.showPastQuery,\n            });\n        }\n    }\n\n    render() {\n        return (\n            <div className={classes.main}>\n                <div className={classes.container}>\n                    <h1 className={classes.title}>Ask Query</h1>\n                    <p className={classes.subtitle}>\n                        Do you have any querytion regarding any Events or\n                        anything to ask from the Event Manager?\n                    </p>\n                    <form\n                        action=\"#\"\n                        id=\"js-form\"\n                        className={classes.form}\n                        onSubmit={this.handleSubmit.bind(this)}\n                    >\n                        <ValidationMessage\n                            valid={this.state.formValid}\n                            message={this.state.errorMessage.form}\n                        />\n                        {/* Username */}\n                        <div className={classes.form_group}>\n                            <div className={classes.container_label}>\n                                <label\n                                    className={classes.label}\n                                    htmlFor=\"username\"\n                                >\n                                    Username\n                                </label>\n                                <ValidationMessage\n                                    valid={this.state.usernameValid}\n                                    message={this.state.errorMessage.username}\n                                />\n                            </div>\n                            <input\n                                type=\"text\"\n                                id=\"username\"\n                                name=\"username\"\n                                className={classes.form_field}\n                                value={this.state.username}\n                                onChange={(e) =>\n                                    this.updateUsername(e.target.value)\n                                }\n                                placeholder=\"Username\"\n                            />\n                        </div>\n                        {/* Category */}\n                        <div className={classes.form_group}>\n                            <div className={classes.container_label}>\n                                <label\n                                    className={classes.label}\n                                    htmlFor=\"category\"\n                                >\n                                    Query Category\n                                </label>\n                                <ValidationMessage\n                                    valid={this.state.categoryValid}\n                                    message={this.state.errorMessage.category}\n                                />\n                            </div>\n                            <select\n                                name=\"category\"\n                                id=\"category\"\n                                className={classes.form_field}\n                                value={this.state.category}\n                                onChange={(e) =>\n                                    this.updateCategory(e.target.value)\n                                }\n                            >\n                                {this.getCategoryOptions()}\n                            </select>\n                        </div>\n                        {/* Query */}\n                        <div className={classes.form_group}>\n                            <div className={classes.container_label}>\n                                <label\n                                    className={classes.label}\n                                    htmlFor=\"query\"\n                                >\n                                    Query\n                                </label>\n                                <ValidationMessage\n                                    valid={this.state.queryValid}\n                                    message={this.state.errorMessage.query}\n                                />\n                            </div>\n                            <textarea\n                                type=\"text\"\n                                id=\"query\"\n                                name=\"query\"\n                                className={classes.form_field}\n                                value={this.state.query}\n                                onChange={(e) =>\n                                    this.updateQuery(e.target.value)\n                                }\n                                rows=\"5\"\n                                placeholder=\"Enter your query here\"\n                            />\n                        </div>\n                        {/* Submit */}\n                        <div className={classes.btn}>\n                            <Button\n                                buttonStyle=\"btn--rounded-dark\"\n                                className={classes.btn}\n                                type=\"submit\"\n                                disabled={!this.state.formValid}\n                            >\n                                Ask Query\n                            </Button>\n                        </div>\n                    </form>\n                </div>\n\n                <div className={classes.past_query}>\n                    <Button\n                        buttonStyle=\"btn--rounded-dark\"\n                        className={classes.see_past_query_btn}\n                        onClick={() => this.updateBtn()}\n                    >\n                        {this.state.btnText}\n                    </Button>\n                    {this.state.showPastQuery ? (\n                        <div className={classes.faqcontainer}>\n                            <div className={classes.container_fluid}>\n                                {this.state.queries.map((ele) => {\n                                    return <Single {...ele} />;\n                                })}\n                            </div>\n                        </div>\n                    ) : null}\n                </div>\n                {this.state.showPopup && (\n                    <div>\n                        <SuccessError\n                            show={true}\n                            success={this.state.successErrorPopup}\n                            message={this.state.successErrorMessage}\n                            closePopup={async () => {\n                                await this.setState({\n                                    showPopup: false,\n                                });\n                            }}\n                        />\n                    </div>\n                )}\n            </div>\n        );\n    }\n}\nexport default AskQuery;\n"]},"metadata":{},"sourceType":"module"}