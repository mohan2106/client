{"ast":null,"code":"var _jsxFileName = \"/home/mohan/dev/react/client/src/components/Scoreboard/Scoreboard.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport classes from \"./Scoreboard.module.css\";\nimport SuccessError from \"../SuccessError/SuccessError\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Scoreboard = props => {\n  _s();\n\n  const [updateScoreboard, setUpdateScoreboard] = useState(false);\n  const [btnText, setBtnText] = useState(\"Update Scoreboard\");\n  const [collegeScore, setCollegeScore] = useState([]);\n  const [sortedScoreboard, setSortedScoreboard] = useState([]);\n  const [popup, setPopup] = useState({\n    show: false,\n    SuccessError: false,\n    message: \"\"\n  });\n\n  const showForm = () => {\n    const data = sortedScoreboard.sort((a, b) => {\n      return b.score - a.score;\n    }).map(d => {\n      var dd = { ...d\n      };\n      dd.isUpdating = true;\n      return dd;\n    });\n    setSortedScoreboard(data);\n  };\n\n  const showList = () => {\n    let prevRank = 0;\n    let prevScore = Infinity;\n    console.log(sortedScoreboard);\n    const data = sortedScoreboard.sort((a, b) => {\n      return b.score - a.score;\n    }).map(d => {\n      var dd = { ...d\n      };\n      dd.isUpdating = false;\n\n      if (dd.score < prevScore) {\n        prevScore = dd.score;\n        dd.rank = prevRank + 1;\n        prevRank = dd.rank;\n      } else {\n        dd.rank = prevRank;\n      }\n\n      return dd;\n    });\n    setSortedScoreboard(data);\n  };\n\n  const changeScoreboard = async () => {\n    console.log(collegeScore);\n    console.log(sortedScoreboard);\n\n    if (!updateScoreboard) {\n      showForm();\n      setBtnText(\"Save Scoreboard\");\n    } else {\n      const url = process.env.REACT_APP_API_ENDPOINT + \"event/\" + props.eventid + \"/scoreboard\";\n      const colleges = sortedScoreboard.map(college => college.college);\n      const scores = sortedScoreboard.map(college => parseInt(college.score));\n      fetch(url, {\n        method: \"PATCH\",\n        headers: {\n          \"Content-type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          participatingCollege: colleges,\n          scores: scores\n        })\n      }).then(async res => {\n        console.log(res);\n        setPopup({\n          show: true,\n          SuccessError: true,\n          message: \"Scoreboard updated successfully.\"\n        });\n      }).catch(async err => {\n        setPopup({\n          show: true,\n          SuccessError: false,\n          message: \"Scoreboard could not be updated.\"\n        });\n        console.log(err);\n      });\n      showList();\n      setBtnText(\"Update Scoreboard\");\n    }\n\n    setUpdateScoreboard(!updateScoreboard);\n  };\n\n  const updateScore = (score, id) => {\n    var update = collegeScore.map(d => {\n      var dd = d;\n\n      if (id === d.id) {\n        dd.score = score;\n      }\n\n      return dd;\n    });\n    setCollegeScore(update);\n    var update2 = sortedScoreboard.map((d, i) => {\n      var dd = d;\n\n      if (id === d.id) {\n        dd.score = score;\n      }\n\n      return dd;\n    });\n    setSortedScoreboard(update2);\n  };\n\n  useEffect(() => {\n    let url = process.env.REACT_APP_API_ENDPOINT + \"event/\";\n\n    if (props.hasOwnProperty(\"eventid\")) {\n      url = url.concat(props.eventid);\n      url = url.concat(\"/scoreboard\");\n    } else {\n      url = url.concat(\"scoreboard\");\n    }\n\n    console.log(url);\n    fetch(url).then(async res => {\n      const scores = await res.json();\n      console.log(scores);\n      scores.map((college, i) => college.id = i);\n      setCollegeScore(scores);\n      let prevRank = 0;\n      let prevScore = Infinity;\n      const sortedData = scores.sort((a, b) => {\n        return b.score - a.score;\n      }).map(d => {\n        const pass = { ...d,\n          isUpdating: false\n        };\n\n        if (pass.score < prevScore) {\n          prevScore = pass.score;\n          pass.rank = prevRank + 1;\n          prevRank = pass.rank;\n        } else {\n          pass.rank = prevRank;\n        }\n\n        return pass;\n      });\n      setSortedScoreboard(sortedData);\n    });\n  }, [props]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.container,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.list,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.single,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: `${classes.single_item} ${classes.dark}`,\n          children: \"College Name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `${classes.single_item} ${classes.dark} ${classes[\"light-border\"]}`,\n          children: \"Scores\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `${classes.single_item} ${classes.dark}`,\n          children: \"Rank\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 17\n      }, this), sortedScoreboard.map((props, i) => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.single,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: classes.single_item,\n            children: props.college\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 29\n          }, this), updateScoreboard ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: classes.single_item,\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              value: props.score,\n              onChange: e => updateScore(e.target.value, props.id)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 179,\n              columnNumber: 37\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 178,\n            columnNumber: 33\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            className: classes.single_item,\n            children: props.score\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 191,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: classes.single_item,\n            children: props.rank\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 196,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 25\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 13\n    }, this), props.eventid && /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: changeScoreboard,\n      className: classes.update,\n      children: btnText\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 17\n    }, this), popup.show && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(SuccessError, {\n        show: true,\n        success: popup.SuccessError,\n        message: popup.message,\n        closePopup: async () => {\n          await setPopup({\n            show: false,\n            SuccessError: false,\n            message: \"\"\n          });\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 156,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Scoreboard, \"Acb1sbJuD5KBqpmKgcyEXZozVZk=\");\n\n_c = Scoreboard;\nexport default Scoreboard;\n\nvar _c;\n\n$RefreshReg$(_c, \"Scoreboard\");","map":{"version":3,"sources":["/home/mohan/dev/react/client/src/components/Scoreboard/Scoreboard.js"],"names":["React","useState","useEffect","classes","SuccessError","Scoreboard","props","updateScoreboard","setUpdateScoreboard","btnText","setBtnText","collegeScore","setCollegeScore","sortedScoreboard","setSortedScoreboard","popup","setPopup","show","message","showForm","data","sort","a","b","score","map","d","dd","isUpdating","showList","prevRank","prevScore","Infinity","console","log","rank","changeScoreboard","url","process","env","REACT_APP_API_ENDPOINT","eventid","colleges","college","scores","parseInt","fetch","method","headers","body","JSON","stringify","participatingCollege","then","res","catch","err","updateScore","id","update","update2","i","hasOwnProperty","concat","json","sortedData","pass","container","list","single","single_item","dark","e","target","value"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport classes from \"./Scoreboard.module.css\";\nimport SuccessError from \"../SuccessError/SuccessError\";\n\nconst Scoreboard = (props) => {\n    const [updateScoreboard, setUpdateScoreboard] = useState(false);\n    const [btnText, setBtnText] = useState(\"Update Scoreboard\");\n    const [collegeScore, setCollegeScore] = useState([]);\n    const [sortedScoreboard, setSortedScoreboard] = useState([]);\n    const [popup, setPopup] = useState({\n        show: false,\n        SuccessError: false,\n        message: \"\",\n    });\n\n    const showForm = () => {\n        const data = sortedScoreboard\n            .sort((a, b) => {\n                return b.score - a.score;\n            })\n            .map((d) => {\n                var dd = { ...d };\n                dd.isUpdating = true;\n                return dd;\n            });\n        setSortedScoreboard(data);\n    };\n\n    const showList = () => {\n        let prevRank = 0;\n        let prevScore = Infinity;\n        console.log(sortedScoreboard);\n        const data = sortedScoreboard\n            .sort((a, b) => {\n                return b.score - a.score;\n            })\n            .map((d) => {\n                var dd = { ...d };\n                dd.isUpdating = false;\n                if (dd.score < prevScore) {\n                    prevScore = dd.score;\n                    dd.rank = prevRank + 1;\n                    prevRank = dd.rank;\n                } else {\n                    dd.rank = prevRank;\n                }\n                return dd;\n            });\n        setSortedScoreboard(data);\n    };\n\n    const changeScoreboard = async () => {\n        console.log(collegeScore);\n        console.log(sortedScoreboard);\n        if (!updateScoreboard) {\n            showForm();\n            setBtnText(\"Save Scoreboard\");\n        } else {\n            const url =\n                process.env.REACT_APP_API_ENDPOINT +\n                \"event/\" +\n                props.eventid +\n                \"/scoreboard\";\n            const colleges = sortedScoreboard.map((college) => college.college);\n            const scores = sortedScoreboard.map((college) =>\n                parseInt(college.score)\n            );\n            fetch(url, {\n                method: \"PATCH\",\n                headers: {\n                    \"Content-type\": \"application/json\",\n                },\n                body: JSON.stringify({\n                    participatingCollege: colleges,\n                    scores: scores,\n                }),\n            })\n                .then(async (res) => {\n                    console.log(res);\n                    setPopup({\n                        show: true,\n                        SuccessError: true,\n                        message: \"Scoreboard updated successfully.\",\n                    });\n                })\n                .catch(async (err) => {\n                    setPopup({\n                        show: true,\n                        SuccessError: false,\n                        message: \"Scoreboard could not be updated.\",\n                    });\n                    console.log(err);\n                });\n            showList();\n            setBtnText(\"Update Scoreboard\");\n        }\n        setUpdateScoreboard(!updateScoreboard);\n    };\n\n    const updateScore = (score, id) => {\n        var update = collegeScore.map((d) => {\n            var dd = d;\n            if (id === d.id) {\n                dd.score = score;\n            }\n            return dd;\n        });\n        setCollegeScore(update);\n        var update2 = sortedScoreboard.map((d, i) => {\n            var dd = d;\n            if (id === d.id) {\n                dd.score = score;\n            }\n            return dd;\n        });\n        setSortedScoreboard(update2);\n    };\n    useEffect(() => {\n        let url = process.env.REACT_APP_API_ENDPOINT + \"event/\";\n        if (props.hasOwnProperty(\"eventid\")) {\n            url = url.concat(props.eventid);\n            url = url.concat(\"/scoreboard\");\n        } else {\n            url = url.concat(\"scoreboard\");\n        }\n        console.log(url);\n        fetch(url).then(async (res) => {\n            const scores = await res.json();\n            console.log(scores);\n            scores.map((college, i) => (college.id = i));\n            setCollegeScore(scores);\n            let prevRank = 0;\n            let prevScore = Infinity;\n            const sortedData = scores\n                .sort((a, b) => {\n                    return b.score - a.score;\n                })\n                .map((d) => {\n                    const pass = {\n                        ...d,\n                        isUpdating: false,\n                    };\n                    if (pass.score < prevScore) {\n                        prevScore = pass.score;\n                        pass.rank = prevRank + 1;\n                        prevRank = pass.rank;\n                    } else {\n                        pass.rank = prevRank;\n                    }\n                    return pass;\n                });\n            setSortedScoreboard(sortedData);\n        });\n    }, [props]);\n    return (\n        <div className={classes.container}>\n            <div className={classes.list}>\n                <div className={classes.single}>\n                    <div className={`${classes.single_item} ${classes.dark}`}>\n                        College Name\n                    </div>\n                    <div\n                        className={`${classes.single_item} ${classes.dark} ${classes[\"light-border\"]}`}\n                    >\n                        Scores\n                    </div>\n                    <div className={`${classes.single_item} ${classes.dark}`}>\n                        Rank\n                    </div>\n                </div>\n                {sortedScoreboard.map((props, i) => {\n                    return (\n                        <div className={classes.single}>\n                            <div className={classes.single_item}>\n                                {props.college}\n                            </div>\n                            {updateScoreboard ? (\n                                <div className={classes.single_item}>\n                                    <input\n                                        type=\"number\"\n                                        value={props.score}\n                                        onChange={(e) =>\n                                            updateScore(\n                                                e.target.value,\n                                                props.id\n                                            )\n                                        }\n                                    ></input>\n                                </div>\n                            ) : (\n                                <div className={classes.single_item}>\n                                    {props.score}\n                                </div>\n                            )}\n\n                            <div className={classes.single_item}>\n                                {props.rank}\n                            </div>\n                        </div>\n                    );\n                })}\n            </div>\n            {/* <Link to='/updateScore/id'> */}\n            {props.eventid && (\n                <button onClick={changeScoreboard} className={classes.update}>\n                    {btnText}\n                </button>\n            )}\n            {/* </Link> */}\n            {popup.show && (\n                <div>\n                    <SuccessError\n                        show={true}\n                        success={popup.SuccessError}\n                        message={popup.message}\n                        closePopup={async () => {\n                            await setPopup({\n                                show: false,\n                                SuccessError: false,\n                                message: \"\",\n                            });\n                        }}\n                    />\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default Scoreboard;\n"]},"metadata":{},"sourceType":"module"}